{"ast":null,"code":"const NEWS_API_KEY = process.env.REACT_APP_NEWS_API_KEY;\nconsole.log('NewsService Debug:');\nconsole.log('News API Key available:', NEWS_API_KEY ? 'YES' : 'NO');\nconsole.log('Using mock data due to CORS restrictions');\n\n// Mock news data generator\nconst generateMockNews = searchTerm => {\n  const mockArticles = [{\n    title: `${searchTerm} Stock Reaches New Heights in Trading Session`,\n    description: `${searchTerm} shares showed strong performance today as investors remain optimistic about the company's future prospects and recent developments.`,\n    url: 'https://example.com/news/1',\n    publishedAt: new Date(Date.now() - Math.random() * 3600000).toISOString(),\n    source: {\n      name: 'Financial Times'\n    }\n  }, {\n    title: `Market Analysis: ${searchTerm} Shows Promising Growth Indicators`,\n    description: `Technical analysis suggests ${searchTerm} is positioned for continued growth, with analysts upgrading their price targets following recent earnings.`,\n    url: 'https://example.com/news/2',\n    publishedAt: new Date(Date.now() - Math.random() * 7200000).toISOString(),\n    source: {\n      name: 'Reuters'\n    }\n  }, {\n    title: `${searchTerm} Announces Strategic Partnership Deal`,\n    description: `The company has entered into a significant partnership that is expected to drive revenue growth and expand market reach in the coming quarters.`,\n    url: 'https://example.com/news/3',\n    publishedAt: new Date(Date.now() - Math.random() * 10800000).toISOString(),\n    source: {\n      name: 'Bloomberg'\n    }\n  }, {\n    title: `Investor Sentiment on ${searchTerm} Remains Positive`,\n    description: `Recent surveys show that institutional investors maintain a bullish outlook on ${searchTerm} stock, citing strong fundamentals and market position.`,\n    url: 'https://example.com/news/4',\n    publishedAt: new Date(Date.now() - Math.random() * 14400000).toISOString(),\n    source: {\n      name: 'CNBC'\n    }\n  }, {\n    title: `${searchTerm} Reports Strong Quarterly Performance`,\n    description: `The latest quarterly results exceeded analyst expectations, with revenue growth and improved margins driving positive market reaction.`,\n    url: 'https://example.com/news/5',\n    publishedAt: new Date(Date.now() - Math.random() * 18000000).toISOString(),\n    source: {\n      name: 'Wall Street Journal'\n    }\n  }];\n  return mockArticles;\n};\nexport const newsService = {\n  async getNews(searchTerm, timeRange) {\n    try {\n      console.log(`Fetching news for term: ${searchTerm}, timeRange: ${timeRange}`);\n\n      // Since CORS prevents direct API calls, using mock data\n      console.log('Using mock news data due to CORS restrictions');\n      console.log('Note: For production, implement backend API calls to avoid CORS issues');\n\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));\n      const mockNews = generateMockNews(searchTerm);\n      console.log(`Generated ${mockNews.length} mock news articles for ${searchTerm}`);\n      return mockNews;\n    } catch (error) {\n      console.error('Error fetching news:', error);\n      throw new Error(`Failed to fetch news for ${searchTerm}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n};","map":{"version":3,"names":["NEWS_API_KEY","process","env","REACT_APP_NEWS_API_KEY","console","log","generateMockNews","searchTerm","mockArticles","title","description","url","publishedAt","Date","now","Math","random","toISOString","source","name","newsService","getNews","timeRange","Promise","resolve","setTimeout","mockNews","length","error","Error","message"],"sources":["/Users/loaneruser/Documents/GitHub/current/src/services/newsService.ts"],"sourcesContent":["import { NewsArticle } from '../types';\n\nconst NEWS_API_KEY = process.env.REACT_APP_NEWS_API_KEY;\n\nconsole.log('NewsService Debug:');\nconsole.log('News API Key available:', NEWS_API_KEY ? 'YES' : 'NO');\nconsole.log('Using mock data due to CORS restrictions');\n\n// Mock news data generator\nconst generateMockNews = (searchTerm: string): NewsArticle[] => {\n  const mockArticles: NewsArticle[] = [\n    {\n      title: `${searchTerm} Stock Reaches New Heights in Trading Session`,\n      description: `${searchTerm} shares showed strong performance today as investors remain optimistic about the company's future prospects and recent developments.`,\n      url: 'https://example.com/news/1',\n      publishedAt: new Date(Date.now() - Math.random() * 3600000).toISOString(),\n      source: { name: 'Financial Times' }\n    },\n    {\n      title: `Market Analysis: ${searchTerm} Shows Promising Growth Indicators`,\n      description: `Technical analysis suggests ${searchTerm} is positioned for continued growth, with analysts upgrading their price targets following recent earnings.`,\n      url: 'https://example.com/news/2',\n      publishedAt: new Date(Date.now() - Math.random() * 7200000).toISOString(),\n      source: { name: 'Reuters' }\n    },\n    {\n      title: `${searchTerm} Announces Strategic Partnership Deal`,\n      description: `The company has entered into a significant partnership that is expected to drive revenue growth and expand market reach in the coming quarters.`,\n      url: 'https://example.com/news/3',\n      publishedAt: new Date(Date.now() - Math.random() * 10800000).toISOString(),\n      source: { name: 'Bloomberg' }\n    },\n    {\n      title: `Investor Sentiment on ${searchTerm} Remains Positive`,\n      description: `Recent surveys show that institutional investors maintain a bullish outlook on ${searchTerm} stock, citing strong fundamentals and market position.`,\n      url: 'https://example.com/news/4',\n      publishedAt: new Date(Date.now() - Math.random() * 14400000).toISOString(),\n      source: { name: 'CNBC' }\n    },\n    {\n      title: `${searchTerm} Reports Strong Quarterly Performance`,\n      description: `The latest quarterly results exceeded analyst expectations, with revenue growth and improved margins driving positive market reaction.`,\n      url: 'https://example.com/news/5',\n      publishedAt: new Date(Date.now() - Math.random() * 18000000).toISOString(),\n      source: { name: 'Wall Street Journal' }\n    }\n  ];\n\n  return mockArticles;\n};\n\nexport const newsService = {\n  async getNews(searchTerm: string, timeRange: string): Promise<NewsArticle[]> {\n    try {\n      console.log(`Fetching news for term: ${searchTerm}, timeRange: ${timeRange}`);\n      \n      // Since CORS prevents direct API calls, using mock data\n      console.log('Using mock news data due to CORS restrictions');\n      console.log('Note: For production, implement backend API calls to avoid CORS issues');\n      \n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));\n      \n      const mockNews = generateMockNews(searchTerm);\n      console.log(`Generated ${mockNews.length} mock news articles for ${searchTerm}`);\n      \n      return mockNews;\n    } catch (error) {\n      console.error('Error fetching news:', error);\n      throw new Error(`Failed to fetch news for ${searchTerm}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}