{"ast":null,"code":"const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';\nexport const stockService = {\n  async getStockData(symbol, timeRange) {\n    try {\n      // clean up symbol format\n      const formattedSymbol = symbol.trim().toUpperCase();\n      const url = `${BACKEND_URL}/api/stock/${formattedSymbol}?timeRange=${timeRange}`;\n      console.log('Stock Service: Making request to:', url);\n\n      // call backend with time range\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Stock Service: Response status:', response.status, response.statusText);\n      console.log('Stock Service: Response ok:', response.ok);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          error: 'Unknown error'\n        }));\n        console.log('Stock Service: Error data:', errorData);\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const stockData = await response.json();\n      console.log('Stock Service: Received data:', stockData);\n      console.log('Stock Service: Data length:', stockData.length);\n      return stockData;\n    } catch (error) {\n      console.error('Stock Service: Error caught:', error);\n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      throw new Error(`Failed to fetch stock data for ${symbol}: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","stockService","getStockData","symbol","timeRange","formattedSymbol","trim","toUpperCase","url","console","log","response","fetch","method","headers","status","statusText","ok","errorData","json","catch","error","Error","stockData","length","message","includes","name"],"sources":["/Users/alexanderalmanza/current/src/services/stockService.ts"],"sourcesContent":["import { StockData } from '../types';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';\n\nexport const stockService = {\n  async getStockData(symbol: string, timeRange: string): Promise<StockData[]> {\n    try {\n      // clean up symbol format\n      const formattedSymbol = symbol.trim().toUpperCase();\n      const url = `${BACKEND_URL}/api/stock/${formattedSymbol}?timeRange=${timeRange}`;\n      \n      console.log('Stock Service: Making request to:', url);\n\n      // call backend with time range\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      console.log('Stock Service: Response status:', response.status, response.statusText);\n      console.log('Stock Service: Response ok:', response.ok);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        console.log('Stock Service: Error data:', errorData);\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const stockData: StockData[] = await response.json();\n      console.log('Stock Service: Received data:', stockData);\n      console.log('Stock Service: Data length:', stockData.length);\n      \n      return stockData;\n    } catch (error: any) {\n      console.error('Stock Service: Error caught:', error);\n      \n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      \n      throw new Error(`Failed to fetch stock data for ${symbol}: ${error.message}`);\n    }\n  },\n}; "],"mappings":"AAEA,MAAMA,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,uBAAuB;AAEhF,OAAO,MAAMC,YAAY,GAAG;EAC1B,MAAMC,YAAYA,CAACC,MAAc,EAAEC,SAAiB,EAAwB;IAC1E,IAAI;MACF;MACA,MAAMC,eAAe,GAAGF,MAAM,CAACG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnD,MAAMC,GAAG,GAAG,GAAGX,WAAW,cAAcQ,eAAe,cAAcD,SAAS,EAAE;MAEhFK,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,GAAG,CAAC;;MAErD;MACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;QAChCK,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEFL,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEC,QAAQ,CAACI,MAAM,EAAEJ,QAAQ,CAACK,UAAU,CAAC;MACpFP,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEC,QAAQ,CAACM,EAAE,CAAC;MAEvD,IAAI,CAACN,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;UAAEC,KAAK,EAAE;QAAgB,CAAC,CAAC,CAAC;QACjFZ,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEQ,SAAS,CAAC;QACpD,MAAM,IAAII,KAAK,CAACJ,SAAS,CAACG,KAAK,IAAI,QAAQV,QAAQ,CAACI,MAAM,KAAKJ,QAAQ,CAACK,UAAU,EAAE,CAAC;MACvF;MAEA,MAAMO,SAAsB,GAAG,MAAMZ,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpDV,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEa,SAAS,CAAC;MACvDd,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEa,SAAS,CAACC,MAAM,CAAC;MAE5D,OAAOD,SAAS;IAClB,CAAC,CAAC,OAAOF,KAAU,EAAE;MACnBZ,OAAO,CAACY,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MAEpD,IAAIA,KAAK,CAACI,OAAO,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIL,KAAK,CAACM,IAAI,KAAK,WAAW,EAAE;QACjE,MAAM,IAAIL,KAAK,CAAC,8EAA8E,CAAC;MACjG;MAEA,MAAM,IAAIA,KAAK,CAAC,kCAAkCnB,MAAM,KAAKkB,KAAK,CAACI,OAAO,EAAE,CAAC;IAC/E;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}