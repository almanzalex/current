{"ast":null,"code":"const BACKEND_URL = 'http://localhost:3001';\nexport const newsService = {\n  async getNews(searchTerm) {\n    try {\n      console.log(`Fetching news for term: ${searchTerm}`);\n\n      // call backend api\n      const response = await fetch(`${BACKEND_URL}/api/news/${encodeURIComponent(searchTerm)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Backend response status:', response.status);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          error: 'Unknown error'\n        }));\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const newsArticles = await response.json();\n      console.log(`Received ${newsArticles.length} news articles for ${searchTerm}`);\n      return newsArticles;\n    } catch (error) {\n      console.error('Error fetching news:', error);\n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      throw new Error(`Failed to fetch news for ${searchTerm}: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["BACKEND_URL","newsService","getNews","searchTerm","console","log","response","fetch","encodeURIComponent","method","headers","status","ok","errorData","json","catch","error","Error","statusText","newsArticles","length","message","includes","name"],"sources":["/Users/alexanderalmanza/current/src/services/newsService.ts"],"sourcesContent":["import { NewsArticle } from '../types';\n\nconst BACKEND_URL = 'http://localhost:3001';\n\n\n\nexport const newsService = {\n  async getNews(searchTerm: string): Promise<NewsArticle[]> {\n    try {\n      console.log(`Fetching news for term: ${searchTerm}`);\n      \n      // call backend api\n      const response = await fetch(`${BACKEND_URL}/api/news/${encodeURIComponent(searchTerm)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      console.log('Backend response status:', response.status);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const newsArticles: NewsArticle[] = await response.json();\n      console.log(`Received ${newsArticles.length} news articles for ${searchTerm}`);\n      \n      return newsArticles;\n    } catch (error: any) {\n      console.error('Error fetching news:', error);\n      \n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      \n      throw new Error(`Failed to fetch news for ${searchTerm}: ${error.message}`);\n    }\n  },\n}; "],"mappings":"AAEA,MAAMA,WAAW,GAAG,uBAAuB;AAI3C,OAAO,MAAMC,WAAW,GAAG;EACzB,MAAMC,OAAOA,CAACC,UAAkB,EAA0B;IACxD,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,2BAA2BF,UAAU,EAAE,CAAC;;MAEpD;MACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,WAAW,aAAaQ,kBAAkB,CAACL,UAAU,CAAC,EAAE,EAAE;QACxFM,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEFN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEC,QAAQ,CAACK,MAAM,CAAC;MAExD,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;UAAEC,KAAK,EAAE;QAAgB,CAAC,CAAC,CAAC;QACjF,MAAM,IAAIC,KAAK,CAACJ,SAAS,CAACG,KAAK,IAAI,QAAQV,QAAQ,CAACK,MAAM,KAAKL,QAAQ,CAACY,UAAU,EAAE,CAAC;MACvF;MAEA,MAAMC,YAA2B,GAAG,MAAMb,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACzDV,OAAO,CAACC,GAAG,CAAC,YAAYc,YAAY,CAACC,MAAM,sBAAsBjB,UAAU,EAAE,CAAC;MAE9E,OAAOgB,YAAY;IACrB,CAAC,CAAC,OAAOH,KAAU,EAAE;MACnBZ,OAAO,CAACY,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAE5C,IAAIA,KAAK,CAACK,OAAO,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIN,KAAK,CAACO,IAAI,KAAK,WAAW,EAAE;QACjE,MAAM,IAAIN,KAAK,CAAC,8EAA8E,CAAC;MACjG;MAEA,MAAM,IAAIA,KAAK,CAAC,4BAA4Bd,UAAU,KAAKa,KAAK,CAACK,OAAO,EAAE,CAAC;IAC7E;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}