{"ast":null,"code":"const FINNHUB_API_KEY = process.env.REACT_APP_FINNHUB_API_KEY;\nconst FINNHUB_API_BASE_URL = '/api/finnhub'; // Use proxy instead of direct API\n\n// Debug logging\nconsole.log('StockService Debug:');\nconsole.log('API Key available:', FINNHUB_API_KEY ? 'YES' : 'NO');\nconsole.log('API Key length:', FINNHUB_API_KEY ? FINNHUB_API_KEY.length : 0);\nconsole.log('API Key value:', FINNHUB_API_KEY ? FINNHUB_API_KEY.substring(0, 10) + '...' : 'UNDEFINED');\nconsole.log('Base URL:', FINNHUB_API_BASE_URL);\nexport const stockService = {\n  async getStockData(symbol, timeRange) {\n    try {\n      console.log(`Fetching stock data for symbol: ${symbol}`);\n\n      // Ensure symbol is properly formatted\n      const formattedSymbol = symbol.trim().toUpperCase();\n      console.log(`Formatted symbol: ${formattedSymbol}`);\n      if (!FINNHUB_API_KEY) {\n        throw new Error('Finnhub API key not found. Please check your environment variables.');\n      }\n\n      // Create AbortController for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n      try {\n        // Get real-time quote data using fetch instead of axios\n        console.log('Making API request to /quote endpoint...');\n        const url = `${FINNHUB_API_BASE_URL}/quote?symbol=${formattedSymbol}`;\n        console.log('Request URL:', url);\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'X-Finnhub-Token': FINNHUB_API_KEY\n          },\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        console.log('Response status:', response.status);\n        console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('API Error Response:', errorText);\n          throw new Error(`HTTP ${response.status}: ${errorText}`);\n        }\n        const quoteData = await response.json();\n        console.log('Quote response received:', quoteData);\n        if (!quoteData || typeof quoteData.c !== 'number') {\n          throw new Error(`No quote data available for symbol ${formattedSymbol}. Please check if the symbol is valid.`);\n        }\n        const quote = quoteData;\n        const currentTimestamp = Math.floor(Date.now() / 1000);\n\n        // Since we can't access historical data with the free API key,\n        // we'll create a simple dataset showing current price, previous close,\n        // and simulate some data points for visualization\n        const dataPoints = [];\n\n        // Add previous close as the first data point\n        if (quote.pc && quote.pc > 0) {\n          dataPoints.push({\n            timestamp: currentTimestamp - 86400,\n            // 24 hours ago\n            price: quote.pc,\n            volume: 0\n          });\n        }\n\n        // Add some intermediate points for better visualization\n        // This simulates price movement between previous close and current price\n        if (quote.pc && quote.pc > 0 && quote.c !== quote.pc) {\n          const priceChange = quote.c - quote.pc;\n          const steps = 5;\n          for (let i = 1; i < steps; i++) {\n            const ratio = i / steps;\n            const interpolatedPrice = quote.pc + priceChange * ratio;\n            dataPoints.push({\n              timestamp: currentTimestamp - 86400 + 86400 * ratio,\n              price: interpolatedPrice,\n              volume: 0\n            });\n          }\n        }\n\n        // Add current price as the final data point\n        dataPoints.push({\n          timestamp: currentTimestamp,\n          price: quote.c,\n          volume: 0\n        });\n        console.log(`Generated ${dataPoints.length} data points for ${formattedSymbol}`);\n        return dataPoints;\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      console.error('Error details:', {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      });\n      if (error.name === 'AbortError') {\n        throw new Error('Request timed out. Please check your internet connection.');\n      } else if (error.message.includes('fetch') || error.message.includes('Failed to fetch')) {\n        throw new Error('No response received from Finnhub API. Please check your internet connection.');\n      } else {\n        throw error;\n      }\n    }\n  }\n};","map":{"version":3,"names":["FINNHUB_API_KEY","process","env","REACT_APP_FINNHUB_API_KEY","FINNHUB_API_BASE_URL","console","log","length","substring","stockService","getStockData","symbol","timeRange","formattedSymbol","trim","toUpperCase","Error","controller","AbortController","timeoutId","setTimeout","abort","url","response","fetch","method","headers","signal","clearTimeout","status","Object","fromEntries","entries","ok","errorText","text","error","quoteData","json","c","quote","currentTimestamp","Math","floor","Date","now","dataPoints","pc","push","timestamp","price","volume","priceChange","steps","i","ratio","interpolatedPrice","name","message","stack","includes"],"sources":["/Users/loaneruser/Documents/GitHub/current/src/services/stockService.ts"],"sourcesContent":["import { StockData } from '../types';\n\nconst FINNHUB_API_KEY = process.env.REACT_APP_FINNHUB_API_KEY;\nconst FINNHUB_API_BASE_URL = '/api/finnhub'; // Use proxy instead of direct API\n\n// Debug logging\nconsole.log('StockService Debug:');\nconsole.log('API Key available:', FINNHUB_API_KEY ? 'YES' : 'NO');\nconsole.log('API Key length:', FINNHUB_API_KEY ? FINNHUB_API_KEY.length : 0);\nconsole.log('API Key value:', FINNHUB_API_KEY ? FINNHUB_API_KEY.substring(0, 10) + '...' : 'UNDEFINED');\nconsole.log('Base URL:', FINNHUB_API_BASE_URL);\n\nexport const stockService = {\n  async getStockData(symbol: string, timeRange: string): Promise<StockData[]> {\n    try {\n      console.log(`Fetching stock data for symbol: ${symbol}`);\n      \n      // Ensure symbol is properly formatted\n      const formattedSymbol = symbol.trim().toUpperCase();\n      console.log(`Formatted symbol: ${formattedSymbol}`);\n\n      if (!FINNHUB_API_KEY) {\n        throw new Error('Finnhub API key not found. Please check your environment variables.');\n      }\n\n      // Create AbortController for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      try {\n        // Get real-time quote data using fetch instead of axios\n        console.log('Making API request to /quote endpoint...');\n        const url = `${FINNHUB_API_BASE_URL}/quote?symbol=${formattedSymbol}`;\n        console.log('Request URL:', url);\n        \n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'X-Finnhub-Token': FINNHUB_API_KEY,\n          },\n          signal: controller.signal,\n        });\n\n        clearTimeout(timeoutId);\n\n        console.log('Response status:', response.status);\n        console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('API Error Response:', errorText);\n          throw new Error(`HTTP ${response.status}: ${errorText}`);\n        }\n\n        const quoteData = await response.json();\n        console.log('Quote response received:', quoteData);\n\n        if (!quoteData || typeof quoteData.c !== 'number') {\n          throw new Error(`No quote data available for symbol ${formattedSymbol}. Please check if the symbol is valid.`);\n        }\n\n        const quote = quoteData;\n        const currentTimestamp = Math.floor(Date.now() / 1000);\n        \n        // Since we can't access historical data with the free API key,\n        // we'll create a simple dataset showing current price, previous close,\n        // and simulate some data points for visualization\n        const dataPoints: StockData[] = [];\n        \n        // Add previous close as the first data point\n        if (quote.pc && quote.pc > 0) {\n          dataPoints.push({\n            timestamp: currentTimestamp - 86400, // 24 hours ago\n            price: quote.pc,\n            volume: 0,\n          });\n        }\n        \n        // Add some intermediate points for better visualization\n        // This simulates price movement between previous close and current price\n        if (quote.pc && quote.pc > 0 && quote.c !== quote.pc) {\n          const priceChange = quote.c - quote.pc;\n          const steps = 5;\n          \n          for (let i = 1; i < steps; i++) {\n            const ratio = i / steps;\n            const interpolatedPrice = quote.pc + (priceChange * ratio);\n            dataPoints.push({\n              timestamp: currentTimestamp - 86400 + (86400 * ratio),\n              price: interpolatedPrice,\n              volume: 0,\n            });\n          }\n        }\n        \n        // Add current price as the final data point\n        dataPoints.push({\n          timestamp: currentTimestamp,\n          price: quote.c,\n          volume: 0,\n        });\n\n        console.log(`Generated ${dataPoints.length} data points for ${formattedSymbol}`);\n        return dataPoints;\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    } catch (error: any) {\n      console.error('Error fetching stock data:', error);\n      console.error('Error details:', {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      });\n      \n      if (error.name === 'AbortError') {\n        throw new Error('Request timed out. Please check your internet connection.');\n      } else if (error.message.includes('fetch') || error.message.includes('Failed to fetch')) {\n        throw new Error('No response received from Finnhub API. Please check your internet connection.');\n      } else {\n        throw error;\n      }\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}