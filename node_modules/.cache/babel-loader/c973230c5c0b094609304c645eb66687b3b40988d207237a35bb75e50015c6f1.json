{"ast":null,"code":"const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';\nexport const sentimentService = {\n  async getSentiment(searchTerm) {\n    try {\n      const response = await fetch(`${BACKEND_URL}/api/sentiment/${encodeURIComponent(searchTerm)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          error: 'Unknown error'\n        }));\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const sentimentData = await response.json();\n      return sentimentData;\n    } catch (error) {\n      console.error('Error fetching sentiment:', error);\n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      throw new Error(`Failed to fetch sentiment for ${searchTerm}: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","sentimentService","getSentiment","searchTerm","response","fetch","encodeURIComponent","method","headers","ok","errorData","json","catch","error","Error","status","statusText","sentimentData","console","message","includes","name"],"sources":["/Users/alexanderalmanza/current/src/services/sentimentService.ts"],"sourcesContent":["import { SentimentData } from '../types';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';\n\n\n\nexport const sentimentService = {\n  async getSentiment(searchTerm: string): Promise<SentimentData> {\n    try {\n      const response = await fetch(`${BACKEND_URL}/api/sentiment/${encodeURIComponent(searchTerm)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const sentimentData: SentimentData = await response.json();\n      return sentimentData;\n    } catch (error: any) {\n      console.error('Error fetching sentiment:', error);\n      \n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      \n      throw new Error(`Failed to fetch sentiment for ${searchTerm}: ${error.message}`);\n    }\n  },\n}; "],"mappings":"AAEA,MAAMA,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,uBAAuB;AAIhF,OAAO,MAAMC,gBAAgB,GAAG;EAC9B,MAAMC,YAAYA,CAACC,UAAkB,EAA0B;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,WAAW,kBAAkBS,kBAAkB,CAACH,UAAU,CAAC,EAAE,EAAE;QAC7FI,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;UAAEC,KAAK,EAAE;QAAgB,CAAC,CAAC,CAAC;QACjF,MAAM,IAAIC,KAAK,CAACJ,SAAS,CAACG,KAAK,IAAI,QAAQT,QAAQ,CAACW,MAAM,KAAKX,QAAQ,CAACY,UAAU,EAAE,CAAC;MACvF;MAEA,MAAMC,aAA4B,GAAG,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;MAC1D,OAAOM,aAAa;IACtB,CAAC,CAAC,OAAOJ,KAAU,EAAE;MACnBK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAEjD,IAAIA,KAAK,CAACM,OAAO,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIP,KAAK,CAACQ,IAAI,KAAK,WAAW,EAAE;QACjE,MAAM,IAAIP,KAAK,CAAC,8EAA8E,CAAC;MACjG;MAEA,MAAM,IAAIA,KAAK,CAAC,iCAAiCX,UAAU,KAAKU,KAAK,CAACM,OAAO,EAAE,CAAC;IAClF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}