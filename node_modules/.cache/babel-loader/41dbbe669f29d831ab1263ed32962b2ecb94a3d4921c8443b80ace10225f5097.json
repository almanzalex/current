{"ast":null,"code":"const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';\n\n// Add a global test function for debugging\nwindow.testStockAPI = async () => {\n  console.log('=== Stock API Test ===');\n  console.log('Backend URL:', BACKEND_URL);\n  const url = `${BACKEND_URL}/api/stock/AAPL?timeRange=7d`;\n  console.log('Test URL:', url);\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Response status:', response.status);\n    console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        error: 'Could not parse error response'\n      }));\n      console.log('Error response:', errorData);\n      return {\n        error: errorData\n      };\n    }\n    const data = await response.json();\n    console.log('Success! Data:', data);\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    console.error('Fetch error:', error);\n    return {\n      error: error.message\n    };\n  }\n};\nexport const stockService = {\n  async getStockData(symbol, timeRange) {\n    try {\n      // clean up symbol format\n      const formattedSymbol = symbol.trim().toUpperCase();\n      const url = `${BACKEND_URL}/api/stock/${formattedSymbol}?timeRange=${timeRange}`;\n      console.log('Stock Service: Making request to:', url);\n\n      // call backend with time range\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Stock Service: Response status:', response.status, response.statusText);\n      console.log('Stock Service: Response ok:', response.ok);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          error: 'Unknown error'\n        }));\n        console.log('Stock Service: Error data:', errorData);\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const stockData = await response.json();\n      console.log('Stock Service: Received data:', stockData);\n      console.log('Stock Service: Data length:', stockData.length);\n      return stockData;\n    } catch (error) {\n      console.error('Stock Service: Error caught:', error);\n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      throw new Error(`Failed to fetch stock data for ${symbol}: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","window","testStockAPI","console","log","url","response","fetch","method","headers","status","Object","fromEntries","entries","ok","errorData","json","catch","error","data","success","message","stockService","getStockData","symbol","timeRange","formattedSymbol","trim","toUpperCase","statusText","Error","stockData","length","includes","name"],"sources":["/Users/alexanderalmanza/current/src/services/stockService.ts"],"sourcesContent":["import { StockData } from '../types';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';\n\n// Add a global test function for debugging\n(window as any).testStockAPI = async () => {\n  console.log('=== Stock API Test ===');\n  console.log('Backend URL:', BACKEND_URL);\n  \n  const url = `${BACKEND_URL}/api/stock/AAPL?timeRange=7d`;\n  console.log('Test URL:', url);\n  \n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    console.log('Response status:', response.status);\n    console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ error: 'Could not parse error response' }));\n      console.log('Error response:', errorData);\n      return { error: errorData };\n    }\n    \n    const data = await response.json();\n    console.log('Success! Data:', data);\n    return { success: true, data };\n  } catch (error) {\n    console.error('Fetch error:', error);\n    return { error: error.message };\n  }\n};\n\nexport const stockService = {\n  async getStockData(symbol: string, timeRange: string): Promise<StockData[]> {\n    try {\n      // clean up symbol format\n      const formattedSymbol = symbol.trim().toUpperCase();\n      const url = `${BACKEND_URL}/api/stock/${formattedSymbol}?timeRange=${timeRange}`;\n      \n      console.log('Stock Service: Making request to:', url);\n\n      // call backend with time range\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      console.log('Stock Service: Response status:', response.status, response.statusText);\n      console.log('Stock Service: Response ok:', response.ok);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        console.log('Stock Service: Error data:', errorData);\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const stockData: StockData[] = await response.json();\n      console.log('Stock Service: Received data:', stockData);\n      console.log('Stock Service: Data length:', stockData.length);\n      \n      return stockData;\n    } catch (error: any) {\n      console.error('Stock Service: Error caught:', error);\n      \n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      \n      throw new Error(`Failed to fetch stock data for ${symbol}: ${error.message}`);\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}