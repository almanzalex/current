{"ast":null,"code":"const FINNHUB_API_KEY = process.env.REACT_APP_FINNHUB_API_KEY;\nconst FINNHUB_API_BASE_URL = 'https://finnhub.io/api/v1';\n\n// Debug logging\nconsole.log('StockService Debug:');\nconsole.log('API Key available:', FINNHUB_API_KEY ? 'YES' : 'NO');\nconsole.log('API Key length:', FINNHUB_API_KEY ? FINNHUB_API_KEY.length : 0);\nconsole.log('API Key value:', FINNHUB_API_KEY ? FINNHUB_API_KEY.substring(0, 10) + '...' : 'UNDEFINED');\nconsole.log('Base URL:', FINNHUB_API_BASE_URL);\n\n// Mock data generator for realistic stock prices\nconst generateMockStockData = symbol => {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const dataPoints = [];\n\n  // Base prices for common symbols\n  const basePrices = {\n    'AAPL': 211.23,\n    'MSFT': 420.50,\n    'GOOGL': 2850.30,\n    'TSLA': 185.75,\n    'AMZN': 3100.20,\n    'NVDA': 875.60,\n    'META': 520.40\n  };\n  const basePrice = basePrices[symbol] || 100 + Math.random() * 200;\n\n  // Generate 10 data points over the last 24 hours\n  for (let i = 9; i >= 0; i--) {\n    const timestamp = currentTimestamp - i * 2.4 * 3600; // Every 2.4 hours\n    const variation = (Math.random() - 0.5) * 0.1; // ±5% variation\n    const price = basePrice * (1 + variation);\n    const volume = Math.floor(Math.random() * 1000000) + 500000;\n    dataPoints.push({\n      timestamp,\n      price,\n      volume\n    });\n  }\n  return dataPoints;\n};\nexport const stockService = {\n  async getStockData(symbol, timeRange) {\n    try {\n      console.log(`Fetching stock data for symbol: ${symbol}`);\n\n      // Ensure symbol is properly formatted\n      const formattedSymbol = symbol.trim().toUpperCase();\n      console.log(`Formatted symbol: ${formattedSymbol}`);\n\n      // Since CORS is preventing direct API calls in the browser,\n      // we're using mock data. In production, you would need:\n      // 1. A backend server to make API calls, or\n      // 2. A CORS proxy service, or \n      // 3. Server-side rendering\n      console.log('Using mock data due to CORS restrictions');\n      console.log('Note: For production, implement backend API calls to avoid CORS issues');\n\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n\n      // Generate realistic mock data\n      const mockData = generateMockStockData(formattedSymbol);\n      console.log(`Generated ${mockData.length} data points for ${formattedSymbol}`);\n      return mockData;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      console.error('Error details:', {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      });\n      throw new Error(`Failed to fetch stock data for ${symbol}: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["FINNHUB_API_KEY","process","env","REACT_APP_FINNHUB_API_KEY","FINNHUB_API_BASE_URL","console","log","length","substring","generateMockStockData","symbol","currentTimestamp","Math","floor","Date","now","dataPoints","basePrices","basePrice","random","i","timestamp","variation","price","volume","push","stockService","getStockData","timeRange","formattedSymbol","trim","toUpperCase","Promise","resolve","setTimeout","mockData","error","name","message","stack","Error"],"sources":["/Users/loaneruser/Documents/GitHub/current/src/services/stockService.ts"],"sourcesContent":["import { StockData } from '../types';\n\nconst FINNHUB_API_KEY = process.env.REACT_APP_FINNHUB_API_KEY;\nconst FINNHUB_API_BASE_URL = 'https://finnhub.io/api/v1';\n\n// Debug logging\nconsole.log('StockService Debug:');\nconsole.log('API Key available:', FINNHUB_API_KEY ? 'YES' : 'NO');\nconsole.log('API Key length:', FINNHUB_API_KEY ? FINNHUB_API_KEY.length : 0);\nconsole.log('API Key value:', FINNHUB_API_KEY ? FINNHUB_API_KEY.substring(0, 10) + '...' : 'UNDEFINED');\nconsole.log('Base URL:', FINNHUB_API_BASE_URL);\n\n// Mock data generator for realistic stock prices\nconst generateMockStockData = (symbol: string): StockData[] => {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const dataPoints: StockData[] = [];\n  \n  // Base prices for common symbols\n  const basePrices: { [key: string]: number } = {\n    'AAPL': 211.23,\n    'MSFT': 420.50,\n    'GOOGL': 2850.30,\n    'TSLA': 185.75,\n    'AMZN': 3100.20,\n    'NVDA': 875.60,\n    'META': 520.40,\n  };\n  \n  const basePrice = basePrices[symbol] || 100 + Math.random() * 200;\n  \n  // Generate 10 data points over the last 24 hours\n  for (let i = 9; i >= 0; i--) {\n    const timestamp = currentTimestamp - (i * 2.4 * 3600); // Every 2.4 hours\n    const variation = (Math.random() - 0.5) * 0.1; // ±5% variation\n    const price = basePrice * (1 + variation);\n    const volume = Math.floor(Math.random() * 1000000) + 500000;\n    \n    dataPoints.push({\n      timestamp,\n      price,\n      volume,\n    });\n  }\n  \n  return dataPoints;\n};\n\nexport const stockService = {\n  async getStockData(symbol: string, timeRange: string): Promise<StockData[]> {\n    try {\n      console.log(`Fetching stock data for symbol: ${symbol}`);\n      \n      // Ensure symbol is properly formatted\n      const formattedSymbol = symbol.trim().toUpperCase();\n      console.log(`Formatted symbol: ${formattedSymbol}`);\n\n      // Since CORS is preventing direct API calls in the browser,\n      // we're using mock data. In production, you would need:\n      // 1. A backend server to make API calls, or\n      // 2. A CORS proxy service, or \n      // 3. Server-side rendering\n      console.log('Using mock data due to CORS restrictions');\n      console.log('Note: For production, implement backend API calls to avoid CORS issues');\n      \n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n      \n      // Generate realistic mock data\n      const mockData = generateMockStockData(formattedSymbol);\n      console.log(`Generated ${mockData.length} data points for ${formattedSymbol}`);\n      \n      return mockData;\n    } catch (error: any) {\n      console.error('Error fetching stock data:', error);\n      console.error('Error details:', {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      });\n      \n      throw new Error(`Failed to fetch stock data for ${symbol}: ${error.message}`);\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}