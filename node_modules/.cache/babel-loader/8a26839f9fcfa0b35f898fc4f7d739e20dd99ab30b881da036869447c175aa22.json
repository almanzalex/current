{"ast":null,"code":"const BACKEND_URL = 'http://localhost:3001';\nexport const stockService = {\n  async getStockData(symbol, timeRange) {\n    try {\n      // clean up symbol format\n      const formattedSymbol = symbol.trim().toUpperCase();\n\n      // call backend with time range\n      const response = await fetch(`${BACKEND_URL}/api/stock/${formattedSymbol}?timeRange=${timeRange}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          error: 'Unknown error'\n        }));\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const stockData = await response.json();\n      console.log(`Received ${stockData.length} data points for ${formattedSymbol} over ${timeRange}`);\n      return stockData;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      throw new Error(`Failed to fetch stock data for ${symbol}: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["BACKEND_URL","stockService","getStockData","symbol","timeRange","formattedSymbol","trim","toUpperCase","response","fetch","method","headers","ok","errorData","json","catch","error","Error","status","statusText","stockData","console","log","length","message","includes","name"],"sources":["/Users/alexanderalmanza/current/src/services/stockService.ts"],"sourcesContent":["import { StockData } from '../types';\n\nconst BACKEND_URL = 'http://localhost:3001';\n\n\n\nexport const stockService = {\n  async getStockData(symbol: string, timeRange: string): Promise<StockData[]> {\n    try {\n      // clean up symbol format\n      const formattedSymbol = symbol.trim().toUpperCase();\n\n      // call backend with time range\n      const response = await fetch(`${BACKEND_URL}/api/stock/${formattedSymbol}?timeRange=${timeRange}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const stockData: StockData[] = await response.json();\n      console.log(`Received ${stockData.length} data points for ${formattedSymbol} over ${timeRange}`);\n      \n      return stockData;\n    } catch (error: any) {\n      console.error('Error fetching stock data:', error);\n      \n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        throw new Error('Backend server is not running. Please start the backend server on port 3001.');\n      }\n      \n      throw new Error(`Failed to fetch stock data for ${symbol}: ${error.message}`);\n    }\n  },\n}; "],"mappings":"AAEA,MAAMA,WAAW,GAAG,uBAAuB;AAI3C,OAAO,MAAMC,YAAY,GAAG;EAC1B,MAAMC,YAAYA,CAACC,MAAc,EAAEC,SAAiB,EAAwB;IAC1E,IAAI;MACF;MACA,MAAMC,eAAe,GAAGF,MAAM,CAACG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;MAEnD;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,WAAW,cAAcK,eAAe,cAAcD,SAAS,EAAE,EAAE;QACjGM,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;UAAEC,KAAK,EAAE;QAAgB,CAAC,CAAC,CAAC;QACjF,MAAM,IAAIC,KAAK,CAACJ,SAAS,CAACG,KAAK,IAAI,QAAQR,QAAQ,CAACU,MAAM,KAAKV,QAAQ,CAACW,UAAU,EAAE,CAAC;MACvF;MAEA,MAAMC,SAAsB,GAAG,MAAMZ,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpDO,OAAO,CAACC,GAAG,CAAC,YAAYF,SAAS,CAACG,MAAM,oBAAoBlB,eAAe,SAASD,SAAS,EAAE,CAAC;MAEhG,OAAOgB,SAAS;IAClB,CAAC,CAAC,OAAOJ,KAAU,EAAE;MACnBK,OAAO,CAACL,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAElD,IAAIA,KAAK,CAACQ,OAAO,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIT,KAAK,CAACU,IAAI,KAAK,WAAW,EAAE;QACjE,MAAM,IAAIT,KAAK,CAAC,8EAA8E,CAAC;MACjG;MAEA,MAAM,IAAIA,KAAK,CAAC,kCAAkCd,MAAM,KAAKa,KAAK,CAACQ,OAAO,EAAE,CAAC;IAC/E;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}