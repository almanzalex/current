{"ast":null,"code":"const FINNHUB_API_KEY = process.env.REACT_APP_FINNHUB_API_KEY;\nconst FINNHUB_API_BASE_URL = 'https://finnhub.io/api/v1';\n\n// Debug logging\nconsole.log('StockService Debug:');\nconsole.log('API Key available:', FINNHUB_API_KEY ? 'YES' : 'NO');\nconsole.log('API Key length:', FINNHUB_API_KEY ? FINNHUB_API_KEY.length : 0);\nconsole.log('API Key value:', FINNHUB_API_KEY ? FINNHUB_API_KEY.substring(0, 10) + '...' : 'UNDEFINED');\nconsole.log('Base URL:', FINNHUB_API_BASE_URL);\nexport const stockService = {\n  async getStockData(symbol, timeRange) {\n    try {\n      console.log(`Fetching stock data for symbol: ${symbol}`);\n\n      // Ensure symbol is properly formatted\n      const formattedSymbol = symbol.trim().toUpperCase();\n      console.log(`Formatted symbol: ${formattedSymbol}`);\n      if (!FINNHUB_API_KEY) {\n        throw new Error('Finnhub API key not found. Please check your environment variables.');\n      }\n\n      // Get real-time quote data using fetch instead of axios\n      console.log('Making API request to /quote endpoint...');\n      const url = `${FINNHUB_API_BASE_URL}/quote?symbol=${formattedSymbol}`;\n      console.log('Request URL:', url);\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'X-Finnhub-Token': FINNHUB_API_KEY\n        },\n        // Add timeout using AbortController\n        signal: AbortSignal.timeout(10000)\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n      const quoteData = await response.json();\n      console.log('Quote response received:', quoteData);\n      if (!quoteData || typeof quoteData.c !== 'number') {\n        throw new Error(`No quote data available for symbol ${formattedSymbol}. Please check if the symbol is valid.`);\n      }\n      const quote = quoteData;\n      const currentTimestamp = Math.floor(Date.now() / 1000);\n\n      // Since we can't access historical data with the free API key,\n      // we'll create a simple dataset showing current price, previous close,\n      // and simulate some data points for visualization\n      const dataPoints = [];\n\n      // Add previous close as the first data point\n      if (quote.pc && quote.pc > 0) {\n        dataPoints.push({\n          timestamp: currentTimestamp - 86400,\n          // 24 hours ago\n          price: quote.pc,\n          volume: 0\n        });\n      }\n\n      // Add some intermediate points for better visualization\n      // This simulates price movement between previous close and current price\n      if (quote.pc && quote.pc > 0 && quote.c !== quote.pc) {\n        const priceChange = quote.c - quote.pc;\n        const steps = 5;\n        for (let i = 1; i < steps; i++) {\n          const ratio = i / steps;\n          const interpolatedPrice = quote.pc + priceChange * ratio;\n          dataPoints.push({\n            timestamp: currentTimestamp - 86400 + 86400 * ratio,\n            price: interpolatedPrice,\n            volume: 0\n          });\n        }\n      }\n\n      // Add current price as the final data point\n      dataPoints.push({\n        timestamp: currentTimestamp,\n        price: quote.c,\n        volume: 0\n      });\n      console.log(`Generated ${dataPoints.length} data points for ${formattedSymbol}`);\n      return dataPoints;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      console.error('Error details:', {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      });\n      if (error.name === 'TimeoutError' || error.name === 'AbortError') {\n        throw new Error('Request timed out. Please check your internet connection.');\n      } else if (error.message.includes('fetch')) {\n        throw new Error('No response received from Finnhub API. Please check your internet connection.');\n      } else {\n        throw error;\n      }\n    }\n  },\n  async getSymbol(query) {\n    try {\n      var _await$response$json;\n      const response = await fetch(`${FINNHUB_API_BASE_URL}/search?q=${query.trim()}`, {\n        method: 'GET',\n        headers: {\n          'X-Finnhub-Token': FINNHUB_API_KEY\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n      const results = (_await$response$json = await response.json()) === null || _await$response$json === void 0 ? void 0 : _await$response$json.result;\n      if (!results || !results.length) {\n        throw new Error(`No symbol found for query: ${query}`);\n      }\n\n      // Find the best match (prefer exact matches and US exchanges)\n      const bestMatch = results.find(r => r.symbol.toUpperCase() === query.trim().toUpperCase()) || results[0];\n      return bestMatch.symbol;\n    } catch (error) {\n      console.error('Error fetching symbol:', error);\n      if (error.name === 'TimeoutError' || error.name === 'AbortError') {\n        throw new Error('Request timed out. Please check your internet connection.');\n      } else if (error.message.includes('fetch')) {\n        throw new Error('No response received from Finnhub API. Please check your internet connection.');\n      } else {\n        throw error;\n      }\n    }\n  }\n};","map":{"version":3,"names":["FINNHUB_API_KEY","process","env","REACT_APP_FINNHUB_API_KEY","FINNHUB_API_BASE_URL","console","log","length","substring","stockService","getStockData","symbol","timeRange","formattedSymbol","trim","toUpperCase","Error","url","response","fetch","method","headers","signal","AbortSignal","timeout","status","Object","fromEntries","entries","ok","errorText","text","error","quoteData","json","c","quote","currentTimestamp","Math","floor","Date","now","dataPoints","pc","push","timestamp","price","volume","priceChange","steps","i","ratio","interpolatedPrice","name","message","stack","includes","getSymbol","query","_await$response$json","results","result","bestMatch","find","r"],"sources":["/Users/loaneruser/Documents/GitHub/current/src/services/stockService.ts"],"sourcesContent":["import { StockData } from '../types';\n\nconst FINNHUB_API_KEY = process.env.REACT_APP_FINNHUB_API_KEY;\nconst FINNHUB_API_BASE_URL = 'https://finnhub.io/api/v1';\n\n// Debug logging\nconsole.log('StockService Debug:');\nconsole.log('API Key available:', FINNHUB_API_KEY ? 'YES' : 'NO');\nconsole.log('API Key length:', FINNHUB_API_KEY ? FINNHUB_API_KEY.length : 0);\nconsole.log('API Key value:', FINNHUB_API_KEY ? FINNHUB_API_KEY.substring(0, 10) + '...' : 'UNDEFINED');\nconsole.log('Base URL:', FINNHUB_API_BASE_URL);\n\nexport const stockService = {\n  async getStockData(symbol: string, timeRange: string): Promise<StockData[]> {\n    try {\n      console.log(`Fetching stock data for symbol: ${symbol}`);\n      \n      // Ensure symbol is properly formatted\n      const formattedSymbol = symbol.trim().toUpperCase();\n      console.log(`Formatted symbol: ${formattedSymbol}`);\n\n      if (!FINNHUB_API_KEY) {\n        throw new Error('Finnhub API key not found. Please check your environment variables.');\n      }\n\n      // Get real-time quote data using fetch instead of axios\n      console.log('Making API request to /quote endpoint...');\n      const url = `${FINNHUB_API_BASE_URL}/quote?symbol=${formattedSymbol}`;\n      console.log('Request URL:', url);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'X-Finnhub-Token': FINNHUB_API_KEY,\n        },\n        // Add timeout using AbortController\n        signal: AbortSignal.timeout(10000),\n      });\n\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const quoteData = await response.json();\n      console.log('Quote response received:', quoteData);\n\n      if (!quoteData || typeof quoteData.c !== 'number') {\n        throw new Error(`No quote data available for symbol ${formattedSymbol}. Please check if the symbol is valid.`);\n      }\n\n      const quote = quoteData;\n      const currentTimestamp = Math.floor(Date.now() / 1000);\n      \n      // Since we can't access historical data with the free API key,\n      // we'll create a simple dataset showing current price, previous close,\n      // and simulate some data points for visualization\n      const dataPoints: StockData[] = [];\n      \n      // Add previous close as the first data point\n      if (quote.pc && quote.pc > 0) {\n        dataPoints.push({\n          timestamp: currentTimestamp - 86400, // 24 hours ago\n          price: quote.pc,\n          volume: 0,\n        });\n      }\n      \n      // Add some intermediate points for better visualization\n      // This simulates price movement between previous close and current price\n      if (quote.pc && quote.pc > 0 && quote.c !== quote.pc) {\n        const priceChange = quote.c - quote.pc;\n        const steps = 5;\n        \n        for (let i = 1; i < steps; i++) {\n          const ratio = i / steps;\n          const interpolatedPrice = quote.pc + (priceChange * ratio);\n          dataPoints.push({\n            timestamp: currentTimestamp - 86400 + (86400 * ratio),\n            price: interpolatedPrice,\n            volume: 0,\n          });\n        }\n      }\n      \n      // Add current price as the final data point\n      dataPoints.push({\n        timestamp: currentTimestamp,\n        price: quote.c,\n        volume: 0,\n      });\n\n      console.log(`Generated ${dataPoints.length} data points for ${formattedSymbol}`);\n      return dataPoints;\n    } catch (error: any) {\n      console.error('Error fetching stock data:', error);\n      console.error('Error details:', {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      });\n      \n      if (error.name === 'TimeoutError' || error.name === 'AbortError') {\n        throw new Error('Request timed out. Please check your internet connection.');\n      } else if (error.message.includes('fetch')) {\n        throw new Error('No response received from Finnhub API. Please check your internet connection.');\n      } else {\n        throw error;\n      }\n    }\n  },\n\n  async getSymbol(query: string): Promise<string> {\n    try {\n      const response = await fetch(`${FINNHUB_API_BASE_URL}/search?q=${query.trim()}`, {\n        method: 'GET',\n        headers: {\n          'X-Finnhub-Token': FINNHUB_API_KEY,\n        },\n        signal: AbortSignal.timeout(10000),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const results = (await response.json())?.result;\n      if (!results || !results.length) {\n        throw new Error(`No symbol found for query: ${query}`);\n      }\n\n      // Find the best match (prefer exact matches and US exchanges)\n      const bestMatch = results.find(\n        (r: any) => r.symbol.toUpperCase() === query.trim().toUpperCase()\n      ) || results[0];\n\n      return bestMatch.symbol;\n    } catch (error: any) {\n      console.error('Error fetching symbol:', error);\n      if (error.name === 'TimeoutError' || error.name === 'AbortError') {\n        throw new Error('Request timed out. Please check your internet connection.');\n      } else if (error.message.includes('fetch')) {\n        throw new Error('No response received from Finnhub API. Please check your internet connection.');\n      } else {\n        throw error;\n      }\n    }\n  },\n}; "],"mappings":"AAEA,MAAMA,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;AAC7D,MAAMC,oBAAoB,GAAG,2BAA2B;;AAExD;AACAC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;AAClCD,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEN,eAAe,GAAG,KAAK,GAAG,IAAI,CAAC;AACjEK,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEN,eAAe,GAAGA,eAAe,CAACO,MAAM,GAAG,CAAC,CAAC;AAC5EF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,eAAe,GAAGA,eAAe,CAACQ,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC;AACvGH,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,oBAAoB,CAAC;AAE9C,OAAO,MAAMK,YAAY,GAAG;EAC1B,MAAMC,YAAYA,CAACC,MAAc,EAAEC,SAAiB,EAAwB;IAC1E,IAAI;MACFP,OAAO,CAACC,GAAG,CAAC,mCAAmCK,MAAM,EAAE,CAAC;;MAExD;MACA,MAAME,eAAe,GAAGF,MAAM,CAACG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnDV,OAAO,CAACC,GAAG,CAAC,qBAAqBO,eAAe,EAAE,CAAC;MAEnD,IAAI,CAACb,eAAe,EAAE;QACpB,MAAM,IAAIgB,KAAK,CAAC,qEAAqE,CAAC;MACxF;;MAEA;MACAX,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvD,MAAMW,GAAG,GAAG,GAAGb,oBAAoB,iBAAiBS,eAAe,EAAE;MACrER,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEW,GAAG,CAAC;MAEhC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;QAChCG,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,iBAAiB,EAAErB;QACrB,CAAC;QACD;QACAsB,MAAM,EAAEC,WAAW,CAACC,OAAO,CAAC,KAAK;MACnC,CAAC,CAAC;MAEFnB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEY,QAAQ,CAACO,MAAM,CAAC;MAChDpB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEoB,MAAM,CAACC,WAAW,CAACT,QAAQ,CAACG,OAAO,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC;MAEhF,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;QACvC1B,OAAO,CAAC2B,KAAK,CAAC,qBAAqB,EAAEF,SAAS,CAAC;QAC/C,MAAM,IAAId,KAAK,CAAC,QAAQE,QAAQ,CAACO,MAAM,KAAKK,SAAS,EAAE,CAAC;MAC1D;MAEA,MAAMG,SAAS,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;MACvC7B,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE2B,SAAS,CAAC;MAElD,IAAI,CAACA,SAAS,IAAI,OAAOA,SAAS,CAACE,CAAC,KAAK,QAAQ,EAAE;QACjD,MAAM,IAAInB,KAAK,CAAC,sCAAsCH,eAAe,wCAAwC,CAAC;MAChH;MAEA,MAAMuB,KAAK,GAAGH,SAAS;MACvB,MAAMI,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;;MAEtD;MACA;MACA;MACA,MAAMC,UAAuB,GAAG,EAAE;;MAElC;MACA,IAAIN,KAAK,CAACO,EAAE,IAAIP,KAAK,CAACO,EAAE,GAAG,CAAC,EAAE;QAC5BD,UAAU,CAACE,IAAI,CAAC;UACdC,SAAS,EAAER,gBAAgB,GAAG,KAAK;UAAE;UACrCS,KAAK,EAAEV,KAAK,CAACO,EAAE;UACfI,MAAM,EAAE;QACV,CAAC,CAAC;MACJ;;MAEA;MACA;MACA,IAAIX,KAAK,CAACO,EAAE,IAAIP,KAAK,CAACO,EAAE,GAAG,CAAC,IAAIP,KAAK,CAACD,CAAC,KAAKC,KAAK,CAACO,EAAE,EAAE;QACpD,MAAMK,WAAW,GAAGZ,KAAK,CAACD,CAAC,GAAGC,KAAK,CAACO,EAAE;QACtC,MAAMM,KAAK,GAAG,CAAC;QAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,EAAEC,CAAC,EAAE,EAAE;UAC9B,MAAMC,KAAK,GAAGD,CAAC,GAAGD,KAAK;UACvB,MAAMG,iBAAiB,GAAGhB,KAAK,CAACO,EAAE,GAAIK,WAAW,GAAGG,KAAM;UAC1DT,UAAU,CAACE,IAAI,CAAC;YACdC,SAAS,EAAER,gBAAgB,GAAG,KAAK,GAAI,KAAK,GAAGc,KAAM;YACrDL,KAAK,EAAEM,iBAAiB;YACxBL,MAAM,EAAE;UACV,CAAC,CAAC;QACJ;MACF;;MAEA;MACAL,UAAU,CAACE,IAAI,CAAC;QACdC,SAAS,EAAER,gBAAgB;QAC3BS,KAAK,EAAEV,KAAK,CAACD,CAAC;QACdY,MAAM,EAAE;MACV,CAAC,CAAC;MAEF1C,OAAO,CAACC,GAAG,CAAC,aAAaoC,UAAU,CAACnC,MAAM,oBAAoBM,eAAe,EAAE,CAAC;MAChF,OAAO6B,UAAU;IACnB,CAAC,CAAC,OAAOV,KAAU,EAAE;MACnB3B,OAAO,CAAC2B,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD3B,OAAO,CAAC2B,KAAK,CAAC,gBAAgB,EAAE;QAC9BqB,IAAI,EAAErB,KAAK,CAACqB,IAAI;QAChBC,OAAO,EAAEtB,KAAK,CAACsB,OAAO;QACtBC,KAAK,EAAEvB,KAAK,CAACuB;MACf,CAAC,CAAC;MAEF,IAAIvB,KAAK,CAACqB,IAAI,KAAK,cAAc,IAAIrB,KAAK,CAACqB,IAAI,KAAK,YAAY,EAAE;QAChE,MAAM,IAAIrC,KAAK,CAAC,2DAA2D,CAAC;MAC9E,CAAC,MAAM,IAAIgB,KAAK,CAACsB,OAAO,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC1C,MAAM,IAAIxC,KAAK,CAAC,+EAA+E,CAAC;MAClG,CAAC,MAAM;QACL,MAAMgB,KAAK;MACb;IACF;EACF,CAAC;EAED,MAAMyB,SAASA,CAACC,KAAa,EAAmB;IAC9C,IAAI;MAAA,IAAAC,oBAAA;MACF,MAAMzC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,oBAAoB,aAAasD,KAAK,CAAC5C,IAAI,CAAC,CAAC,EAAE,EAAE;QAC/EM,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,iBAAiB,EAAErB;QACrB,CAAC;QACDsB,MAAM,EAAEC,WAAW,CAACC,OAAO,CAAC,KAAK;MACnC,CAAC,CAAC;MAEF,IAAI,CAACN,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;QACvC1B,OAAO,CAAC2B,KAAK,CAAC,qBAAqB,EAAEF,SAAS,CAAC;QAC/C,MAAM,IAAId,KAAK,CAAC,QAAQE,QAAQ,CAACO,MAAM,KAAKK,SAAS,EAAE,CAAC;MAC1D;MAEA,MAAM8B,OAAO,IAAAD,oBAAA,GAAI,MAAMzC,QAAQ,CAACgB,IAAI,CAAC,CAAC,cAAAyB,oBAAA,uBAAtBA,oBAAA,CAAyBE,MAAM;MAC/C,IAAI,CAACD,OAAO,IAAI,CAACA,OAAO,CAACrD,MAAM,EAAE;QAC/B,MAAM,IAAIS,KAAK,CAAC,8BAA8B0C,KAAK,EAAE,CAAC;MACxD;;MAEA;MACA,MAAMI,SAAS,GAAGF,OAAO,CAACG,IAAI,CAC3BC,CAAM,IAAKA,CAAC,CAACrD,MAAM,CAACI,WAAW,CAAC,CAAC,KAAK2C,KAAK,CAAC5C,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAClE,CAAC,IAAI6C,OAAO,CAAC,CAAC,CAAC;MAEf,OAAOE,SAAS,CAACnD,MAAM;IACzB,CAAC,CAAC,OAAOqB,KAAU,EAAE;MACnB3B,OAAO,CAAC2B,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,IAAIA,KAAK,CAACqB,IAAI,KAAK,cAAc,IAAIrB,KAAK,CAACqB,IAAI,KAAK,YAAY,EAAE;QAChE,MAAM,IAAIrC,KAAK,CAAC,2DAA2D,CAAC;MAC9E,CAAC,MAAM,IAAIgB,KAAK,CAACsB,OAAO,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC1C,MAAM,IAAIxC,KAAK,CAAC,+EAA+E,CAAC;MAClG,CAAC,MAAM;QACL,MAAMgB,KAAK;MACb;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}