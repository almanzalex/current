{"ast":null,"code":"import { create } from 'zustand';\nimport { stockService } from '../services/stockService';\nimport { newsService } from '../services/newsService';\nimport { socialService } from '../services/socialService';\n// import { sentimentService } from '../services/sentimentService'; // Disabled\n\nexport const useStore = create((set, get) => ({\n  stockData: [],\n  news: [],\n  tweets: [],\n  sentimentData: null,\n  isLoading: false,\n  error: null,\n  currentSymbol: '',\n  timeRange: '24h',\n  fetchData: async (symbol, timeRange) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // get all data at once (sentiment disabled for now)\n      const [stockData, newsData, socialData] = await Promise.all([stockService.getStockData(symbol, timeRange), newsService.getNews(symbol), socialService.getSocialPosts(symbol)\n      // sentimentService.getSentiment(symbol) - disabled due to Reddit restrictions\n      ]);\n      set({\n        stockData,\n        news: newsData,\n        tweets: socialData,\n        sentimentData: null,\n        // Always null - sentiment disabled\n        isLoading: false,\n        error: null,\n        currentSymbol: symbol,\n        timeRange\n      });\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : 'An error occurred',\n        isLoading: false\n      });\n    }\n  }\n}));","map":{"version":3,"names":["create","stockService","newsService","socialService","useStore","set","get","stockData","news","tweets","sentimentData","isLoading","error","currentSymbol","timeRange","fetchData","symbol","newsData","socialData","Promise","all","getStockData","getNews","getSocialPosts","Error","message"],"sources":["/Users/alexanderalmanza/current/src/store/index.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { StockData, NewsArticle, Tweet, SentimentData, SocialResponse } from '../types';\nimport { stockService } from '../services/stockService';\nimport { newsService } from '../services/newsService';\nimport { socialService } from '../services/socialService';\n// import { sentimentService } from '../services/sentimentService'; // Disabled\n\ninterface AppState {\n  stockData: StockData[];\n  news: NewsArticle[];\n  tweets: Tweet[] | SocialResponse;\n  sentimentData: SentimentData | null;\n  isLoading: boolean;\n  error: string | null;\n  currentSymbol: string;\n  timeRange: '1h' | '24h' | '7d' | '30d';\n  fetchData: (symbol: string, timeRange: '1h' | '24h' | '7d' | '30d') => Promise<void>;\n}\n\nexport const useStore = create<AppState>((set, get) => ({\n  stockData: [],\n  news: [],\n  tweets: [],\n  sentimentData: null,\n  isLoading: false,\n  error: null,\n  currentSymbol: '',\n  timeRange: '24h' as '1h' | '24h' | '7d' | '30d',\n\n  fetchData: async (symbol: string, timeRange: '1h' | '24h' | '7d' | '30d') => {\n    set({ isLoading: true, error: null });\n\n    try {\n      // get all data at once (sentiment disabled for now)\n      const [stockData, newsData, socialData] = await Promise.all([\n        stockService.getStockData(symbol, timeRange),\n        newsService.getNews(symbol),\n        socialService.getSocialPosts(symbol),\n        // sentimentService.getSentiment(symbol) - disabled due to Reddit restrictions\n      ]);\n\n      set({\n        stockData,\n        news: newsData,\n        tweets: socialData,\n        sentimentData: null, // Always null - sentiment disabled\n        isLoading: false,\n        error: null,\n        currentSymbol: symbol,\n        timeRange\n      });\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : 'An error occurred',\n        isLoading: false,\n      });\n    }\n  },\n})); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,aAAa,QAAQ,2BAA2B;AACzD;;AAcA,OAAO,MAAMC,QAAQ,GAAGJ,MAAM,CAAW,CAACK,GAAG,EAAEC,GAAG,MAAM;EACtDC,SAAS,EAAE,EAAE;EACbC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE,EAAE;EACVC,aAAa,EAAE,IAAI;EACnBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,aAAa,EAAE,EAAE;EACjBC,SAAS,EAAE,KAAoC;EAE/CC,SAAS,EAAE,MAAAA,CAAOC,MAAc,EAAEF,SAAsC,KAAK;IAC3ET,GAAG,CAAC;MAAEM,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAErC,IAAI;MACF;MACA,MAAM,CAACL,SAAS,EAAEU,QAAQ,EAAEC,UAAU,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC1DnB,YAAY,CAACoB,YAAY,CAACL,MAAM,EAAEF,SAAS,CAAC,EAC5CZ,WAAW,CAACoB,OAAO,CAACN,MAAM,CAAC,EAC3Bb,aAAa,CAACoB,cAAc,CAACP,MAAM;MACnC;MAAA,CACD,CAAC;MAEFX,GAAG,CAAC;QACFE,SAAS;QACTC,IAAI,EAAES,QAAQ;QACdR,MAAM,EAAES,UAAU;QAClBR,aAAa,EAAE,IAAI;QAAE;QACrBC,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAE,IAAI;QACXC,aAAa,EAAEG,MAAM;QACrBF;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdP,GAAG,CAAC;QACFO,KAAK,EAAEA,KAAK,YAAYY,KAAK,GAAGZ,KAAK,CAACa,OAAO,GAAG,mBAAmB;QACnEd,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}