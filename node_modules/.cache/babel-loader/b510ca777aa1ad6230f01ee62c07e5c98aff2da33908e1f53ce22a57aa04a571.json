{"ast":null,"code":"import axios from 'axios';\nconst FINNHUB_API_KEY = process.env.REACT_APP_FINNHUB_API_KEY;\nconst FINNHUB_API_BASE_URL = 'https://finnhub.io/api/v1';\n\n// Configure axios defaults for Finnhub\nconst finnhubClient = axios.create({\n  baseURL: FINNHUB_API_BASE_URL,\n  headers: {\n    'X-Finnhub-Token': FINNHUB_API_KEY\n  },\n  timeout: 10000 // 10 second timeout\n});\nexport const stockService = {\n  async getStockData(symbol, timeRange) {\n    try {\n      // Ensure symbol is properly formatted\n      const formattedSymbol = symbol.trim().toUpperCase();\n\n      // Get real-time quote data\n      const quoteResponse = await finnhubClient.get('/quote', {\n        params: {\n          symbol: formattedSymbol\n        }\n      });\n      if (!quoteResponse.data || typeof quoteResponse.data.c !== 'number') {\n        throw new Error(`No quote data available for symbol ${formattedSymbol}. Please check if the symbol is valid.`);\n      }\n      const quote = quoteResponse.data;\n      const currentTimestamp = Math.floor(Date.now() / 1000);\n\n      // Since we can't access historical data with the free API key,\n      // we'll create a simple dataset showing current price, previous close,\n      // and simulate some data points for visualization\n      const dataPoints = [];\n\n      // Add previous close as the first data point\n      if (quote.pc && quote.pc > 0) {\n        dataPoints.push({\n          timestamp: currentTimestamp - 86400,\n          // 24 hours ago\n          price: quote.pc,\n          volume: 0\n        });\n      }\n\n      // Add some intermediate points for better visualization\n      // This simulates price movement between previous close and current price\n      if (quote.pc && quote.pc > 0 && quote.c !== quote.pc) {\n        const priceChange = quote.c - quote.pc;\n        const steps = 5;\n        for (let i = 1; i < steps; i++) {\n          const ratio = i / steps;\n          const interpolatedPrice = quote.pc + priceChange * ratio;\n          dataPoints.push({\n            timestamp: currentTimestamp - 86400 + 86400 * ratio,\n            price: interpolatedPrice,\n            volume: 0\n          });\n        }\n      }\n\n      // Add current price as the final data point\n      dataPoints.push({\n        timestamp: currentTimestamp,\n        price: quote.c,\n        volume: 0\n      });\n      return dataPoints;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      if (error.response) {\n        var _error$response$data;\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else if (error.response.status === 403) {\n          throw new Error('Access denied. This endpoint may require a paid API subscription.');\n        } else if (error.response.status === 426) {\n          throw new Error('API upgrade required. Please check your API key and subscription.');\n        } else if (error.response.status === 404) {\n          throw new Error(`Stock symbol \"${symbol}\" not found. Please check the symbol and try again.`);\n        }\n        throw new Error(`API Error: ${((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Unknown error'}`);\n      } else if (error.request) {\n        throw new Error('No response received from Finnhub API. Please check your internet connection.');\n      } else {\n        throw error;\n      }\n    }\n  },\n  async getSymbol(query) {\n    try {\n      var _response$data;\n      const response = await finnhubClient.get('/search', {\n        params: {\n          q: query.trim()\n        }\n      });\n      const results = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.result;\n      if (!results || !results.length) {\n        throw new Error(`No symbol found for query: ${query}`);\n      }\n\n      // Find the best match (prefer exact matches and US exchanges)\n      const bestMatch = results.find(r => r.symbol.toUpperCase() === query.trim().toUpperCase()) || results[0];\n      return bestMatch.symbol;\n    } catch (error) {\n      console.error('Error fetching symbol:', error);\n      if (error.response) {\n        var _error$response$data2;\n        if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else if (error.response.status === 403) {\n          throw new Error('Invalid API key or unauthorized access.');\n        }\n        throw new Error(`API Error: ${((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || 'Unknown error'}`);\n      } else if (error.request) {\n        throw new Error('No response received from Finnhub API. Please check your connection.');\n      }\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","FINNHUB_API_KEY","process","env","REACT_APP_FINNHUB_API_KEY","FINNHUB_API_BASE_URL","finnhubClient","create","baseURL","headers","timeout","stockService","getStockData","symbol","timeRange","formattedSymbol","trim","toUpperCase","quoteResponse","get","params","data","c","Error","quote","currentTimestamp","Math","floor","Date","now","dataPoints","pc","push","timestamp","price","volume","priceChange","steps","i","ratio","interpolatedPrice","error","console","response","_error$response$data","status","request","getSymbol","query","_response$data","q","results","result","length","bestMatch","find","r","_error$response$data2"],"sources":["/Users/loaneruser/Documents/GitHub/current/src/services/stockService.ts"],"sourcesContent":["import axios from 'axios';\nimport { StockData } from '../types';\n\nconst FINNHUB_API_KEY = process.env.REACT_APP_FINNHUB_API_KEY;\nconst FINNHUB_API_BASE_URL = 'https://finnhub.io/api/v1';\n\n// Configure axios defaults for Finnhub\nconst finnhubClient = axios.create({\n  baseURL: FINNHUB_API_BASE_URL,\n  headers: {\n    'X-Finnhub-Token': FINNHUB_API_KEY,\n  },\n  timeout: 10000, // 10 second timeout\n});\n\nexport const stockService = {\n  async getStockData(symbol: string, timeRange: string): Promise<StockData[]> {\n    try {\n      // Ensure symbol is properly formatted\n      const formattedSymbol = symbol.trim().toUpperCase();\n\n      // Get real-time quote data\n      const quoteResponse = await finnhubClient.get('/quote', {\n        params: {\n          symbol: formattedSymbol,\n        },\n      });\n\n      if (!quoteResponse.data || typeof quoteResponse.data.c !== 'number') {\n        throw new Error(`No quote data available for symbol ${formattedSymbol}. Please check if the symbol is valid.`);\n      }\n\n      const quote = quoteResponse.data;\n      const currentTimestamp = Math.floor(Date.now() / 1000);\n      \n      // Since we can't access historical data with the free API key,\n      // we'll create a simple dataset showing current price, previous close,\n      // and simulate some data points for visualization\n      const dataPoints: StockData[] = [];\n      \n      // Add previous close as the first data point\n      if (quote.pc && quote.pc > 0) {\n        dataPoints.push({\n          timestamp: currentTimestamp - 86400, // 24 hours ago\n          price: quote.pc,\n          volume: 0,\n        });\n      }\n      \n      // Add some intermediate points for better visualization\n      // This simulates price movement between previous close and current price\n      if (quote.pc && quote.pc > 0 && quote.c !== quote.pc) {\n        const priceChange = quote.c - quote.pc;\n        const steps = 5;\n        \n        for (let i = 1; i < steps; i++) {\n          const ratio = i / steps;\n          const interpolatedPrice = quote.pc + (priceChange * ratio);\n          dataPoints.push({\n            timestamp: currentTimestamp - 86400 + (86400 * ratio),\n            price: interpolatedPrice,\n            volume: 0,\n          });\n        }\n      }\n      \n      // Add current price as the final data point\n      dataPoints.push({\n        timestamp: currentTimestamp,\n        price: quote.c,\n        volume: 0,\n      });\n\n      return dataPoints;\n    } catch (error: any) {\n      console.error('Error fetching stock data:', error);\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else if (error.response.status === 403) {\n          throw new Error('Access denied. This endpoint may require a paid API subscription.');\n        } else if (error.response.status === 426) {\n          throw new Error('API upgrade required. Please check your API key and subscription.');\n        } else if (error.response.status === 404) {\n          throw new Error(`Stock symbol \"${symbol}\" not found. Please check the symbol and try again.`);\n        }\n        throw new Error(`API Error: ${error.response.data?.error || 'Unknown error'}`);\n      } else if (error.request) {\n        throw new Error('No response received from Finnhub API. Please check your internet connection.');\n      } else {\n        throw error;\n      }\n    }\n  },\n\n  async getSymbol(query: string): Promise<string> {\n    try {\n      const response = await finnhubClient.get('/search', {\n        params: {\n          q: query.trim(),\n        },\n      });\n\n      const results = response.data?.result;\n      if (!results || !results.length) {\n        throw new Error(`No symbol found for query: ${query}`);\n      }\n\n      // Find the best match (prefer exact matches and US exchanges)\n      const bestMatch = results.find(\n        (r: any) => r.symbol.toUpperCase() === query.trim().toUpperCase()\n      ) || results[0];\n\n      return bestMatch.symbol;\n    } catch (error: any) {\n      console.error('Error fetching symbol:', error);\n      if (error.response) {\n        if (error.response.status === 429) {\n          throw new Error('API rate limit exceeded. Please try again later.');\n        } else if (error.response.status === 403) {\n          throw new Error('Invalid API key or unauthorized access.');\n        }\n        throw new Error(`API Error: ${error.response.data?.error || 'Unknown error'}`);\n      } else if (error.request) {\n        throw new Error('No response received from Finnhub API. Please check your connection.');\n      }\n      throw error;\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}