{"ast":null,"code":"import axios from 'axios';\nconst TWITTER_API_KEY = process.env.REACT_APP_TWITTER_API_KEY;\nconst TWITTER_API_BASE_URL = 'https://api.twitter.com/2';\nconst analyzeSentiment = text => {\n  // Simple sentiment analysis based on keyword matching\n  // In a production environment, you'd want to use a proper NLP service\n  const positiveWords = ['great', 'good', 'awesome', 'excellent', 'up', 'gain', 'profit', 'bull'];\n  const negativeWords = ['bad', 'poor', 'terrible', 'down', 'loss', 'bear', 'crash', 'decline'];\n  const words = text.toLowerCase().split(/\\s+/);\n  let score = 0;\n  let positiveCount = 0;\n  let negativeCount = 0;\n  words.forEach(word => {\n    if (positiveWords.includes(word)) positiveCount++;\n    if (negativeWords.includes(word)) negativeCount++;\n  });\n  score = (positiveCount - negativeCount) / (positiveCount + negativeCount || 1);\n  return {\n    score: Math.max(-1, Math.min(1, score)),\n    // Clamp between -1 and 1\n    label: score > 0.1 ? 'positive' : score < -0.1 ? 'negative' : 'neutral',\n    confidence: Math.abs(score)\n  };\n};\nexport const twitterService = {\n  async getTweets(searchTerm, timeRange) {\n    try {\n      // Calculate start_time based on timeRange\n      const now = new Date();\n      const startTime = new Date(now.getTime());\n      switch (timeRange) {\n        case '1h':\n          startTime.setHours(now.getHours() - 1);\n          break;\n        case '24h':\n          startTime.setDate(now.getDate() - 1);\n          break;\n        case '7d':\n          startTime.setDate(now.getDate() - 7);\n          break;\n        case '30d':\n          startTime.setDate(now.getDate() - 30);\n          break;\n      }\n      const response = await axios.get(`${TWITTER_API_BASE_URL}/tweets/search/recent`, {\n        headers: {\n          'Authorization': `Bearer ${TWITTER_API_KEY}`\n        },\n        params: {\n          query: searchTerm,\n          'start_time': startTime.toISOString(),\n          'tweet.fields': 'created_at,author_id',\n          'user.fields': 'username',\n          'max_results': 100\n        }\n      });\n      return response.data.data.map(tweet => ({\n        id: tweet.id,\n        text: tweet.text,\n        created_at: tweet.created_at,\n        author_username: tweet.author_id,\n        // In real implementation, we'd get the actual username\n        sentiment: analyzeSentiment(tweet.text)\n      }));\n    } catch (error) {\n      console.error('Error fetching tweets:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","TWITTER_API_KEY","process","env","REACT_APP_TWITTER_API_KEY","TWITTER_API_BASE_URL","analyzeSentiment","text","positiveWords","negativeWords","words","toLowerCase","split","score","positiveCount","negativeCount","forEach","word","includes","Math","max","min","label","confidence","abs","twitterService","getTweets","searchTerm","timeRange","now","Date","startTime","getTime","setHours","getHours","setDate","getDate","response","get","headers","params","query","toISOString","data","map","tweet","id","created_at","author_username","author_id","sentiment","error","console"],"sources":["/Users/loaneruser/Documents/GitHub/current/src/services/twitterService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Tweet, SentimentScore } from '../types';\n\nconst TWITTER_API_KEY = process.env.REACT_APP_TWITTER_API_KEY;\nconst TWITTER_API_BASE_URL = 'https://api.twitter.com/2';\n\nconst analyzeSentiment = (text: string): SentimentScore => {\n  // Simple sentiment analysis based on keyword matching\n  // In a production environment, you'd want to use a proper NLP service\n  const positiveWords = ['great', 'good', 'awesome', 'excellent', 'up', 'gain', 'profit', 'bull'];\n  const negativeWords = ['bad', 'poor', 'terrible', 'down', 'loss', 'bear', 'crash', 'decline'];\n\n  const words = text.toLowerCase().split(/\\s+/);\n  let score = 0;\n  let positiveCount = 0;\n  let negativeCount = 0;\n\n  words.forEach(word => {\n    if (positiveWords.includes(word)) positiveCount++;\n    if (negativeWords.includes(word)) negativeCount++;\n  });\n\n  score = (positiveCount - negativeCount) / (positiveCount + negativeCount || 1);\n  \n  return {\n    score: Math.max(-1, Math.min(1, score)), // Clamp between -1 and 1\n    label: score > 0.1 ? 'positive' : score < -0.1 ? 'negative' : 'neutral',\n    confidence: Math.abs(score),\n  };\n};\n\nexport const twitterService = {\n  async getTweets(searchTerm: string, timeRange: string): Promise<Tweet[]> {\n    try {\n      // Calculate start_time based on timeRange\n      const now = new Date();\n      const startTime = new Date(now.getTime());\n      \n      switch (timeRange) {\n        case '1h':\n          startTime.setHours(now.getHours() - 1);\n          break;\n        case '24h':\n          startTime.setDate(now.getDate() - 1);\n          break;\n        case '7d':\n          startTime.setDate(now.getDate() - 7);\n          break;\n        case '30d':\n          startTime.setDate(now.getDate() - 30);\n          break;\n      }\n\n      const response = await axios.get(`${TWITTER_API_BASE_URL}/tweets/search/recent`, {\n        headers: {\n          'Authorization': `Bearer ${TWITTER_API_KEY}`,\n        },\n        params: {\n          query: searchTerm,\n          'start_time': startTime.toISOString(),\n          'tweet.fields': 'created_at,author_id',\n          'user.fields': 'username',\n          'max_results': 100,\n        },\n      });\n\n      return response.data.data.map((tweet: any) => ({\n        id: tweet.id,\n        text: tweet.text,\n        created_at: tweet.created_at,\n        author_username: tweet.author_id, // In real implementation, we'd get the actual username\n        sentiment: analyzeSentiment(tweet.text),\n      }));\n    } catch (error) {\n      console.error('Error fetching tweets:', error);\n      throw error;\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}