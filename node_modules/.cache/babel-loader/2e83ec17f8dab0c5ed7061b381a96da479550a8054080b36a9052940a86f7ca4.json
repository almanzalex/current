{"ast":null,"code":"import { create } from 'zustand';\nimport { stockService } from '../services/stockService';\nimport { newsService } from '../services/newsService';\nimport { socialService } from '../services/socialService';\nimport { sentimentService } from '../services/sentimentService';\nexport const useStore = create((set, get) => ({\n  stockData: [],\n  news: [],\n  tweets: [],\n  sentimentData: null,\n  isLoading: false,\n  error: null,\n  currentSymbol: '',\n  timeRange: '24h',\n  fetchData: async (symbol, timeRange) => {\n    console.log('Store: fetchData called with:', symbol, timeRange);\n    set({\n      isLoading: true,\n      error: null\n    });\n\n    // Initialize default values\n    let stockData = [];\n    let newsData = [];\n    let socialData = [];\n    let sentimentData = null;\n    let finalError = null;\n    try {\n      // Fetch stock data\n      console.log('Store: Fetching stock data...');\n      try {\n        stockData = await stockService.getStockData(symbol, timeRange);\n        console.log('Store: Stock data fetched successfully:', stockData.length, 'items');\n      } catch (error) {\n        console.error('Store: Stock data failed:', error.message);\n        finalError = error.message;\n      }\n\n      // Fetch news data (don't let it fail everything)\n      console.log('Store: Fetching news data...');\n      try {\n        newsData = await newsService.getNews(symbol);\n        console.log('Store: News data fetched successfully:', newsData.length, 'items');\n      } catch (error) {\n        console.error('Store: News data failed (continuing):', error.message);\n        // Don't set finalError for news failures\n      }\n\n      // Fetch social data (don't let it fail everything)\n      console.log('Store: Fetching social data...');\n      try {\n        socialData = await socialService.getSocialPosts(symbol);\n        console.log('Store: Social data fetched successfully:', Array.isArray(socialData) ? socialData.length : 'non-array response');\n      } catch (error) {\n        console.error('Store: Social data failed (continuing):', error.message);\n        // Don't set finalError for social failures\n      }\n\n      // Fetch sentiment data (don't let it fail everything)\n      console.log('Store: Fetching sentiment data...');\n      try {\n        sentimentData = await sentimentService.getSentiment(symbol);\n        console.log('Store: Sentiment data fetched successfully:', sentimentData);\n      } catch (error) {\n        console.error('Store: Sentiment data failed (continuing):', error.message);\n        // Don't set finalError for sentiment failures\n      }\n\n      // Update state with whatever data we got\n      set({\n        stockData,\n        news: newsData,\n        tweets: socialData,\n        sentimentData,\n        // Now actually setting the sentiment data\n        isLoading: false,\n        error: finalError,\n        // Only set if stock data (the main data) failed\n        currentSymbol: symbol,\n        timeRange\n      });\n      console.log('Store: fetchData completed. Error:', finalError);\n    } catch (error) {\n      console.error('Store: Unexpected error in fetchData:', error);\n      set({\n        error: error instanceof Error ? error.message : 'An unexpected error occurred',\n        isLoading: false\n      });\n    }\n  }\n}));","map":{"version":3,"names":["create","stockService","newsService","socialService","sentimentService","useStore","set","get","stockData","news","tweets","sentimentData","isLoading","error","currentSymbol","timeRange","fetchData","symbol","console","log","newsData","socialData","finalError","getStockData","length","message","getNews","getSocialPosts","Array","isArray","getSentiment","Error"],"sources":["/Users/alexanderalmanza/current/src/store/index.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { StockData, NewsArticle, Tweet, SentimentData, SocialResponse } from '../types';\nimport { stockService } from '../services/stockService';\nimport { newsService } from '../services/newsService';\nimport { socialService } from '../services/socialService';\nimport { sentimentService } from '../services/sentimentService';\n\ninterface AppState {\n  stockData: StockData[];\n  news: NewsArticle[];\n  tweets: Tweet[] | SocialResponse;\n  sentimentData: SentimentData | null;\n  isLoading: boolean;\n  error: string | null;\n  currentSymbol: string;\n  timeRange: '1h' | '24h' | '7d' | '30d';\n  fetchData: (symbol: string, timeRange: '1h' | '24h' | '7d' | '30d') => Promise<void>;\n}\n\nexport const useStore = create<AppState>((set, get) => ({\n  stockData: [],\n  news: [],\n  tweets: [],\n  sentimentData: null,\n  isLoading: false,\n  error: null,\n  currentSymbol: '',\n  timeRange: '24h' as '1h' | '24h' | '7d' | '30d',\n\n  fetchData: async (symbol: string, timeRange: '1h' | '24h' | '7d' | '30d') => {\n    console.log('Store: fetchData called with:', symbol, timeRange);\n    set({ isLoading: true, error: null });\n\n    // Initialize default values\n    let stockData: StockData[] = [];\n    let newsData: NewsArticle[] = [];\n    let socialData: Tweet[] = [];\n    let sentimentData: SentimentData | null = null;\n    let finalError: string | null = null;\n\n    try {\n      // Fetch stock data\n      console.log('Store: Fetching stock data...');\n      try {\n        stockData = await stockService.getStockData(symbol, timeRange);\n        console.log('Store: Stock data fetched successfully:', stockData.length, 'items');\n      } catch (error: any) {\n        console.error('Store: Stock data failed:', error.message);\n        finalError = error.message;\n      }\n\n      // Fetch news data (don't let it fail everything)\n      console.log('Store: Fetching news data...');\n      try {\n        newsData = await newsService.getNews(symbol);\n        console.log('Store: News data fetched successfully:', newsData.length, 'items');\n      } catch (error: any) {\n        console.error('Store: News data failed (continuing):', error.message);\n        // Don't set finalError for news failures\n      }\n\n      // Fetch social data (don't let it fail everything)\n      console.log('Store: Fetching social data...');\n      try {\n        socialData = await socialService.getSocialPosts(symbol);\n        console.log('Store: Social data fetched successfully:', Array.isArray(socialData) ? socialData.length : 'non-array response');\n      } catch (error: any) {\n        console.error('Store: Social data failed (continuing):', error.message);\n        // Don't set finalError for social failures\n      }\n\n      // Fetch sentiment data (don't let it fail everything)\n      console.log('Store: Fetching sentiment data...');\n      try {\n        sentimentData = await sentimentService.getSentiment(symbol);\n        console.log('Store: Sentiment data fetched successfully:', sentimentData);\n      } catch (error: any) {\n        console.error('Store: Sentiment data failed (continuing):', error.message);\n        // Don't set finalError for sentiment failures\n      }\n\n      // Update state with whatever data we got\n      set({\n        stockData,\n        news: newsData,\n        tweets: socialData,\n        sentimentData, // Now actually setting the sentiment data\n        isLoading: false,\n        error: finalError, // Only set if stock data (the main data) failed\n        currentSymbol: symbol,\n        timeRange\n      });\n\n      console.log('Store: fetchData completed. Error:', finalError);\n    } catch (error: any) {\n      console.error('Store: Unexpected error in fetchData:', error);\n      set({\n        error: error instanceof Error ? error.message : 'An unexpected error occurred',\n        isLoading: false,\n      });\n    }\n  },\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}